openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8081
  description: Generated server url
paths:
  /api/v1/admin/books/{id}:
    put:
      tags:
      - book-administration-controller
      operationId: updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookDto"
        required: true
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BookDto"
    delete:
      tags:
      - book-administration-controller
      operationId: deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
  /api/v1/admin/books:
    post:
      tags:
      - book-administration-controller
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookDto"
        required: true
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
  /api/v1/admin/books/{bookId}/increase-stock:
    patch:
      tags:
      - book-administration-controller
      operationId: increaseStock
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: quantity
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BookDto"
  /api/v1/books:
    get:
      tags:
      - book-controller
      operationId: getBooks
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 20
      - name: ids
        in: query
        required: false
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BookPageResponseDto"
  /api/v1/books/{id}:
    get:
      tags:
      - book-controller
      operationId: getBookById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BookDto"
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        errorCode:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
    BookDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
          pattern: "\\d{10}|\\d{13}"
        type:
          type: string
          enum:
          - NEW_RELEASE
          - REGULAR
          - OLD_EDITION
        price:
          type: number
        stockQuantity:
          type: integer
          format: int32
          minimum: 0
      required:
      - author
      - isbn
      - price
      - stockQuantity
      - title
      - type
    BookPageResponseDto:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: "#/components/schemas/BookDto"
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
